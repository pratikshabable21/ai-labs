%%car classification
% Define facts about cars and their attributes.
type(honda_civic, sedan).
type(toyota_corolla, sedan).
type(ford_mustang, coupe).
type(chevrolet_camaro, coupe).

fuel(honda_civic, gasoline).
fuel(toyota_corolla, gasoline).
fuel(ford_mustang, gasoline).
fuel(chevrolet_camaro, gasoline).

origin(honda_civic, japan).
origin(toyota_corolla, japan).
origin(ford_mustang, usa).
origin(chevrolet_camaro, usa).

% Define rules to determine the category of a car.
sedan(Car) :- type(Car, sedan).
coupe(Car) :- type(Car, coupe).
gasoline_car(Car) :- fuel(Car, gasoline).
japan_car(Car) :- origin(Car, japan).
usa_car(Car) :- origin(Car, usa).

% Define a rule to classify a car based on its attributes.
classify_car(Car, TypeCategory, FuelCategory, OriginCategory) :-
    (   sedan(Car) -> TypeCategory = 'is a sedan'
    ;   coupe(Car) -> TypeCategory = 'is a coupe'
    ;   TypeCategory = 'has an unknown type'
    ),
    (   gasoline_car(Car) -> FuelCategory = 'uses gasoline'
    ;   FuelCategory = 'uses an unknown fuel type'
    ),
    (   japan_car(Car) -> OriginCategory = 'is from Japan'
    ;   usa_car(Car) -> OriginCategory = 'is from USA'
    ;   OriginCategory = 'has an unknown origin'
    ).






%%animal classification
% Define facts about animals and their habitats.
habitat(dog, land).
habitat(cat, land).
habitat(human, land).
habitat(snake, land).
habitat(bird, air).
habitat(fish, water).
habitat(dolphin, water).
habitat(eagle, air).
habitat(bat, air).

% Define rules to determine the category of an animal.
land_animal(X) :- habitat(X, land).
water_animal(X) :- habitat(X, water).
flying_animal(X) :- habitat(X, air).

% Define a rule to identify and classify an animal.
classify_animal(Animal, Category) :-
    (   land_animal(Animal) -> Category = 'is a land animal'
    ;   water_animal(Animal) -> Category = 'is a water animal'
    ;   flying_animal(Animal) -> Category = 'is a flying animal'
    ;   Category = 'not a known animal'
    ).




%% animal identification
% Animal identification rules
% To run, type      go.

go :- hypothesize(Animal), 
       write('I guess that the animal is: '), 
       write(Animal), nl, undo.

 /* hypotheses to be tested */ 
hypothesize(cheetah) :- cheetah, !. 
hypothesize(tiger) :- tiger, !. 
hypothesize(giraffe) :- giraffe, !. 
hypothesize(zebra) :- zebra, !. 
hypothesize(ostrich) :- ostrich, !. 
hypothesize(penguin) :- penguin, !. 
hypothesize(albatross) :- albatross, !. 
hypothesize(unknown). /* no diagnosis */ 

/* animal identification rules */ 
cheetah :- mammal, carnivore, 
                verify(has_tawny_color), 
                verify(has_dark_spots). 
tiger :- mammal, carnivore, 
            verify(has_tawny_color), 
            verify(has_black_stripes). 
giraffe :- ungulate, 
               verify(has_long_neck), 
               verify(has_long_legs). 
zebra :- ungulate, 
             verify(has_black_stripes). 
ostrich :- bird, 
               verify(does_not_fly), 
               verify(has_long_neck). 
penguin :- bird, 
                 verify(does_not_fly), 
                 verify(swims), 
                 verify(is_black_and_white). 
albatross :- bird, 
                   verify(appears_in_story_Ancient_Mariner), 
                   verify(flys_well). 
/* classification rules */ 
mammal :- verify(has_hair), !. 
mammal :- verify(gives_milk). 
bird :- verify(has_feathers), !. 
bird :- verify(flys), 
           verify(lays_eggs). 
carnivore :- verify(eats_meat), !. 
carnivore :- verify(has_pointed_teeth), 
                    verify(has_claws), 
                    verify(has_forward_eyes). 
ungulate :- mammal, verify(has_hooves), !. 
ungulate :- mammal, verify(chews_cud). 
/* how to ask questions */ 
ask(Question) :- 
        write('Does the animal have the following attribute: '), 
        write(Question), write('? '), 
         read(Response), nl, 
         ( (Response == yes ; Response == y) 
         -> assert(yes(Question)) ; 
         assert(no(Question)), fail). 
:- dynamic yes/1,no/1. 
/* How to verify something */ 
verify(S) :- (yes(S) -> true ; (no(S) -> fail ; ask(S))). 
/* undo all yes/no assertions */ 
undo :- retract(yes(_)),fail. 
undo :- retract(no(_)),fail. 
undo.




%% animal identification
% Animal identification rules
% To run, type      go.

go :- hypothesize(Animal), 
       write('I guess that the animal is: '), 
       write(Animal), nl, undo.

 /* hypotheses to be tested */ 
hypothesize(cheetah) :- cheetah, !. 
hypothesize(tiger) :- tiger, !. 
hypothesize(giraffe) :- giraffe, !. 
hypothesize(zebra) :- zebra, !. 
hypothesize(ostrich) :- ostrich, !. 
hypothesize(penguin) :- penguin, !. 
hypothesize(albatross) :- albatross, !. 
hypothesize(unknown). /* no diagnosis */ 

/* animal identification rules */ 
cheetah :- mammal, carnivore, 
                verify(has_tawny_color), 
                verify(has_dark_spots). 
tiger :- mammal, carnivore, 
            verify(has_tawny_color), 
            verify(has_black_stripes). 
giraffe :- ungulate, 
               verify(has_long_neck), 
               verify(has_long_legs). 
zebra :- ungulate, 
             verify(has_black_stripes). 
ostrich :- bird, 
               verify(does_not_fly), 
               verify(has_long_neck). 
penguin :- bird, 
                 verify(does_not_fly), 
                 verify(swims), 
                 verify(is_black_and_white). 
albatross :- bird, 
                   verify(appears_in_story_Ancient_Mariner), 
                   verify(flys_well). 
/* classification rules */ 
mammal :- verify(has_hair), !. 
mammal :- verify(gives_milk). 
bird :- verify(has_feathers), !. 
bird :- verify(flys), 
           verify(lays_eggs). 
carnivore :- verify(eats_meat), !. 
carnivore :- verify(has_pointed_teeth), 
                    verify(has_claws), 
                    verify(has_forward_eyes). 
ungulate :- mammal, verify(has_hooves), !. 
ungulate :- mammal, verify(chews_cud). 
/* how to ask questions */ 
ask(Question) :- 
        write('Does the animal have the following attribute: '), 
        write(Question), write('? '), 
         read(Response), nl, 
         ( (Response == yes ; Response == y) 
         -> assert(yes(Question)) ; 
         assert(no(Question)), fail). 
:- dynamic yes/1,no/1. 
/* How to verify something */ 
verify(S) :- (yes(S) -> true ; (no(S) -> fail ; ask(S))). 
/* undo all yes/no assertions */ 
undo :- retract(yes(_)),fail. 
undo :- retract(no(_)),fail. 
undo.



%% relationship
% Facts 
female(mary). 
female(lisa). 
female(susan). 
female(emma).
 %  male(john). 
male(david). 
male(alex). 
male(paul). 
parent(mary, david).
 %   parent(alex, david). 
parent(alex, lisa). 
parent(david, susan). 
parent(david, emma). 
parent(emma, john). 
parent(david, paul). 
parent(paul, john). 
 % Rules 
sister(X, Y) :- parent(Z, X), 
parent(Z, Y),     female(X), 
    X \== Y. 
 
mother(X, Y) :- parent(X, Y),     female(X). 
father(X, Y) :- parent(X, Y),     male(X). brother(X, Y) :- parent(Z, X), parent(Z, Y),
 male(X),     X \== Y.


%%monkey banana
%% Define the initial state
initial_state(state(at_door, at_middle, on_floor, has_not)).

%% Define the goal state
goal_state(state(_, _, _, has)).

%% Define the actions that can change the state
move(state(at_door, Box, on_floor, Has),
     walk_to_middle,
     state(at_middle, Box, on_floor, Has)).

move(state(at_middle, Box, on_floor, Has),
     walk_to_door,
     state(at_door, Box, on_floor, Has)).

move(state(at_middle, at_middle, on_floor, has_not),
     push_box_to_bananas,
     state(at_middle, under_bananas, on_floor, has_not)).

move(state(at_middle, under_bananas, on_floor, has_not),
     climb_box,
     state(at_middle, under_bananas, on_box, has_not)).

move(state(at_middle, under_bananas, on_box, has_not),
     grasp_bananas,
     state(at_middle, under_bananas, on_box, has)).

%% Define the plan to reach the goal
plan(State, _, []) :-
    goal_state(State).

plan(State1, Visited, [Action|Actions]) :-
    move(State1, Action, State2),
    \+ member(State2, Visited), % Avoid visiting the same state again
    plan(State2, [State2|Visited], Actions).

%% Entry point for solving the problem
solve :-
    initial_state(State),
    plan(State, [State], Actions),
    format('Plan to reach the bananas: ~w~n', [Actions]).
